"""
–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å:
–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –≤—ã–ø—É—Å–∫ —Ç–æ–∫–µ–Ω–æ–≤.
"""

import os
import sys
from dotenv import load_dotenv

# –ü–æ–¥–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

from verification.api_client import FinancialAPIClient
from blockchain.db_manager import DBManager
from utils.logger import Logger


def run_full_demo():
    logger = Logger("TokenizeLocal")
    logger.log("=== –¢–æ–∫–µ–Ω–∏–∑–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å–∞ —á–µ—Ä–µ–∑ –ë–î ===")

    # –®–∞–≥ 0: –ü–æ–ª—É—á–∞–µ–º API-–∫–ª—é—á
    checko_api_key = os.getenv("CHECKO_API_KEY", "yCEWUepinagwBCn3")
    if not checko_api_key or checko_api_key == "your_checko_api_key":
        logger.log("[ERROR] –ù–µ –Ω–∞–π–¥–µ–Ω CHECKO_API_KEY", level="ERROR")
        sys.exit(1)

    # –®–∞–≥ 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤
    card_client = FinancialAPIClient(api_key=checko_api_key)
    db = DBManager()

    # –®–∞–≥ 2: –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
    inn = input("–í–≤–µ–¥–∏—Ç–µ –ò–ù–ù –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è —Ç–æ–∫–µ–Ω–∏–∑–∞—Ü–∏–∏: ").strip()
    tokens_input = input("–°–∫–æ–ª—å–∫–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤—ã–ø—É—Å—Ç–∏—Ç—å? ").strip()

    try:
        tokens = float(tokens_input)
        if tokens <= 0:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º.")
    except ValueError as e:
        logger.log(f"[ERROR] –û—à–∏–±–∫–∞: {e}", level="ERROR")
        sys.exit(1)

    # –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏ —á–µ—Ä–µ–∑ /v2/card
    logger.log(f"\n[INFO] –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–∞–Ω–∏—é —Å –ò–ù–ù {inn} —á–µ—Ä–µ–∑ Checko API...")

    try:
        company_info = card_client.get_company_info(inn)
        logger.log(f"[INFO] –ö–æ–º–ø–∞–Ω–∏—è –Ω–∞–π–¥–µ–Ω–∞: {company_info['name']}")
        logger.log(f"–°—Ç–∞—Ç—É—Å: {company_info['status']} ‚Äî –º–æ–∂–Ω–æ –≤—ã–ø—É—Å–∫–∞—Ç—å —Ç–æ–∫–µ–Ω—ã.")
    except Exception as e:
        logger.log(f"[ERROR] –ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫—É: {e}", level="ERROR")
        sys.exit(1)

    # –®–∞–≥ 4: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –≤ –ë–î
    logger.log("\n[INFO] –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î...")
    try:
        db.register_or_update_business(inn=inn, name=company_info["name"])
    except Exception as e:
        logger.log(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –±–∏–∑–Ω–µ—Å: {e}", level="ERROR")
        sys.exit(1)

    # –®–∞–≥ 5: –í—ã–ø—É—Å–∫ —Ç–æ–∫–µ–Ω–æ–≤
    logger.log(f"\n[INFO] –í—ã–ø—É—Å–∫ {tokens} —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ '{company_info['name']}'...")
    try:
        db.issue_tokens(inn=inn, amount=tokens)
    except Exception as e:
        logger.log(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø—É—Å—Ç–∏—Ç—å —Ç–æ–∫–µ–Ω—ã: {e}", level="ERROR")
        sys.exit(1)

    # –®–∞–≥ 6: –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–∞—Ö
    token_stats = db.get_token_stats(inn=inn)
    if "error" in token_stats:
        logger.log(token_stats["error"], level="ERROR")
    else:
        logger.log("\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–∞—Ö:")
        logger.log(f"–ò–ù–ù: {token_stats['inn']}")
        logger.log(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {token_stats['name']}")
        logger.log(f"–í—ã–ø—É—â–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {token_stats['total_issued']}")
        logger.log(f"–î–∞—Ç–∞ –≤—ã–ø—É—Å–∫–∞: {token_stats['issued_at']}")

    # –®–∞–≥ 7: –í—ã–≤–æ–¥ –≤—Å–µ—Ö –∫–æ–º–ø–∞–Ω–∏–π –∏–∑ –ë–î
    logger.log("\nüìã –í—Å–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –∏—Ö —Ç–æ–∫–µ–Ω—ã:")
    all_issuances = db.get_all_issuances()
    for row in all_issuances:
        inn_db, name_db, amount_db, issued_at_db = row
        amount = amount_db if amount_db is not None else 0
        issued_at = issued_at_db if issued_at_db else "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        logger.log(f"–ò–ù–ù: {inn_db} | –ù–∞–∑–≤–∞–Ω–∏–µ: {name_db} | –í—ã–ø—É—â–µ–Ω–æ: {amount} | –î–∞—Ç–∞: {issued_at}")

    logger.log("\n‚úÖ –¢–æ–∫–µ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


if __name__ == "__main__":
    run_full_demo()