"""
–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å:
–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ. –í—ã–±–æ—Ä –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –∫–æ–º–ø–∞–Ω–∏–µ–π.
"""

import os
import sys
from dotenv import load_dotenv

# –ü–æ–¥–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

from verification.api_client import FinancialAPIClient
from blockchain.db_manager import DBManager
from blockchain.users import UserManager, UserAlreadyExists, InvalidEmail
from utils.logger import Logger


def run_full_demo():
    logger = Logger("TokenizeLocal")
    logger.log("=== –¢–æ–∫–µ–Ω–∏–∑–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å–∞ —á–µ—Ä–µ–∑ –ë–î ===")

    checko_api_key = os.getenv("CHECKO_API_KEY", "yCEWUepinagwBCn3")
    if not checko_api_key or checko_api_key == "your_checko_api_key":
        logger.log("[ERROR] –ù–µ –Ω–∞–π–¥–µ–Ω CHECKO_API_KEY", level="ERROR")
        sys.exit(1)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤
    card_client = FinancialAPIClient(api_key=checko_api_key)
    db = DBManager()
    user_manager = UserManager()

    # --- –í—ã–±–æ—Ä —Ä–æ–ª–∏: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –∫–æ–º–ø–∞–Ω–∏—è ---
    role = input("–í—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –∫–æ–º–ø–∞–Ω–∏—è? (user/company): ").strip().lower()
    if role not in ("user", "company"):
        logger.log("[ERROR] –ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å.", level="ERROR")
        sys.exit(1)

    if role == "user":
        logger.log("\n[INFO] –†–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        email = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email: ").strip()
        password = input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ").strip()

        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            if user_manager.authenticate_user(email, password):
                print(f"[INFO] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {email} –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.")
            else:
                name = input("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ")
                user_manager.register_user(name, email, password)
                print(f"[INFO] –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {email}")
        except Exception as e:
            logger.log(f"[ERROR] –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}", level="ERROR")
            sys.exit(1)

        # --- –í—ã–≤–æ–¥ –≤—Å–µ—Ö –∫–æ–º–ø–∞–Ω–∏–π ---
        logger.log("\n[INFO] –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏:")
        all_issuances = db.get_all_issuances()
        available_companies = []

        for idx, row in enumerate(all_issuances):
            inn_db, name_db, amount_db, issued_at_db = row
            amount = amount_db if amount_db is not None else 0
            print(f"{idx+1}. {name_db} (–ò–ù–ù: {inn_db}) ‚Äî –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {amount}")
            available_companies.append({"inn": inn_db, "name": name_db, "available": amount})

        if not available_companies:
            logger.log("[INFO] –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π.")
            sys.exit(0)

        # --- –í—ã–±–æ—Ä –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –ø–æ–∫—É–ø–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ ---
        choice = int(input("\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏: ")) - 1
        if not (0 <= choice < len(available_companies)):
            logger.log("[ERROR] –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –∫–æ–º–ø–∞–Ω–∏–∏.", level="ERROR")
            sys.exit(1)

        selected = available_companies[choice]
        max_tokens = selected["available"]

        buy_amount = float(input(f"–°–∫–æ–ª—å–∫–æ —Ç–æ–∫–µ–Ω–æ–≤ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å (–¥–æ—Å—Ç—É–ø–Ω–æ: {max_tokens})? "))
        if buy_amount <= 0 or buy_amount > max_tokens:
            logger.log("[ERROR] –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤.", level="ERROR")
            sys.exit(1)

        # --- –°–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –æ–±—â–µ–≥–æ –ø—É–ª–∞ –∏ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ---
        try:
            db.issue_tokens(inn=selected["inn"], amount=-buy_amount)  # –£–º–µ–Ω—å—à–∞–µ–º –æ–±—â–∏–π –ø—É–ª
            db.add_user_tokens(email=email, business_inn=selected["inn"], amount=buy_amount)
            logger.log(f"\n‚úÖ –í—ã –∫—É–ø–∏–ª–∏ {buy_amount} —Ç–æ–∫–µ–Ω–æ–≤ –∫–æ–º–ø–∞–Ω–∏–∏ '{selected['name']}'")
        except Exception as e:
            logger.log(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –∫—É–ø–∏—Ç—å —Ç–æ–∫–µ–Ω—ã: {e}", level="ERROR")
            sys.exit(1)

        # --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
        print("\nüíº –í–∞—à–∏ —Ç–æ–∫–µ–Ω—ã:")
        user_tokens = db.get_user_tokens(email)
        if not user_tokens:
            print("–ù–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤.")
        else:
            for row in user_tokens:
                inn_db, name_db, token_count = row
                print(f"- {name_db} ({inn_db}): {token_count} —Ç–æ–∫–µ–Ω–æ–≤")

        logger.log("\n‚úÖ –¢–æ–∫–µ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    else:
        logger.log("\n[INFO] –†–µ–∂–∏–º –∫–æ–º–ø–∞–Ω–∏–∏.")

        inn = input("–í–≤–µ–¥–∏—Ç–µ –ò–ù–ù –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è —Ç–æ–∫–µ–Ω–∏–∑–∞—Ü–∏–∏: ").strip()
        tokens_input = input("–°–∫–æ–ª—å–∫–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤—ã–ø—É—Å—Ç–∏—Ç—å? ").strip()

        try:
            tokens = float(tokens_input)
            if tokens <= 0:
                raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º.")
        except ValueError as e:
            logger.log(f"[ERROR] –û—à–∏–±–∫–∞: {e}", level="ERROR")
            sys.exit(1)

        # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏ —á–µ—Ä–µ–∑ Checko API ---
        logger.log(f"\n[INFO] –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–∞–Ω–∏—é —Å –ò–ù–ù {inn} —á–µ—Ä–µ–∑ Checko API...")

        try:
            company_info = card_client.get_company_info(inn)
            logger.log(f"[INFO] –ö–æ–º–ø–∞–Ω–∏—è –Ω–∞–π–¥–µ–Ω–∞: {company_info['name']}")
            logger.log(f"–°—Ç–∞—Ç—É—Å: {company_info['status']} ‚Äî –º–æ–∂–Ω–æ –≤—ã–ø—É—Å–∫–∞—Ç—å —Ç–æ–∫–µ–Ω—ã.")
        except Exception as e:
            logger.log(f"[ERROR] –ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫—É: {e}", level="ERROR")
            sys.exit(1)

        # --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –≤ –ë–î ---
        logger.log("\n[INFO] –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î...")
        try:
            db.register_or_update_business(inn=inn, name=company_info["name"])
        except Exception as e:
            logger.log(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –±–∏–∑–Ω–µ—Å: {e}", level="ERROR")
            sys.exit(1)

        # --- –í—ã–ø—É—Å–∫ —Ç–æ–∫–µ–Ω–æ–≤ ---
        logger.log(f"\n[INFO] –í—ã–ø—É—Å–∫ {tokens} —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ '{company_info['name']}'...")
        try:
            db.issue_tokens(inn=inn, amount=tokens)
        except Exception as e:
            logger.log(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø—É—Å—Ç–∏—Ç—å —Ç–æ–∫–µ–Ω—ã: {e}", level="ERROR")
            sys.exit(1)

        # --- –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–∞—Ö ---
        token_stats = db.get_token_stats(inn=inn)
        if "error" in token_stats:
            logger.log(token_stats["error"], level="ERROR")
        else:
            logger.log("\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–∞—Ö:")
            logger.log(f"–ò–ù–ù: {token_stats['inn']}")
            logger.log(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {token_stats['name']}")
            logger.log(f"–í—ã–ø—É—â–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {token_stats['total_issued']}")
            logger.log(f"–î–∞—Ç–∞ –≤—ã–ø—É—Å–∫–∞: {token_stats['issued_at']}")

        logger.log("\n‚úÖ –¢–æ–∫–µ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


if __name__ == "__main__":
    run_full_demo()