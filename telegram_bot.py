"""
–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å:
Telegram-–±–æ—Ç —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º TokenizeLocal (–∞–Ω–∞–ª–æ–≥ main.py)
"""

import os
from typing import Optional, Dict
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
    CallbackQueryHandler
)

from blockchain.db_manager import DBManager
from blockchain.users import UserManager, UserAlreadyExists
from verification.api_client import FinancialAPIClient
from utils.logger import Logger

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞ –∏ —Ç–æ–∫–µ–Ω–∞
logger = Logger("TokenizeLocalBot")
TELEGRAM_BOT_TOKEN = "8184934106:AAElcn4Y28rFjvUOeg83XHxKgJzOoptpvjI"  # –í–∞—à —Ç–æ–∫–µ–Ω

class TelegramBotHandler:
    def __init__(self):
        self.checko_api_key = "yCEWUepinagwBCn3"
        self.user_states = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    def get_user_state(self, user_id: int) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.user_states:
            self.user_states[user_id] = {"role": None, "data": {}}
        return self.user_states[user_id]

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start - –≤—ã–±–æ—Ä —Ä–æ–ª–∏"""
        keyboard = [
            [InlineKeyboardButton("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", callback_data="role_user")],
            [InlineKeyboardButton("üè¢ –ö–æ–º–ø–∞–Ω–∏—è", callback_data="role_company")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TokenizeLocal!\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:",
            reply_markup=reply_markup
        )

    async def handle_role_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏"""
        query = update.callback_query
        await query.answer()
        
        user_id = query.from_user.id
        user_state = self.get_user_state(user_id)
        
        if query.data == "role_user":
            user_state["role"] = "user"
            await query.edit_message_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login –¥–ª—è –≤—Ö–æ–¥–∞ –∏–ª–∏ /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        elif query.data == "role_company":
            user_state["role"] = "company"
            await query.edit_message_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–µ–∂–∏–º –∫–æ–º–ø–∞–Ω–∏–∏. –î–ª—è –≤—ã–ø—É—Å–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /issue_tokens")

    async def register_user(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id
        user_state = self.get_user_state(user_id)
        
        if user_state["role"] != "user":
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ /start")
            return

        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è, email –∏ –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª\n–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω user@example.com 123456")
        user_state["awaiting_register"] = True

    async def login_user(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.effective_user.id
        user_state = self.get_user_state(user_id)
        
        if user_state["role"] != "user":
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ /start")
            return

        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –∏ –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª\n–ü—Ä–∏–º–µ—Ä: user@example.com 123456")
        user_state["awaiting_login"] = True

    async def issue_tokens(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤—ã–ø—É—Å–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤"""
        user_id = update.effective_user.id
        user_state = self.get_user_state(user_id)
        
        if user_state["role"] != "company":
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –∫–æ–º–ø–∞–Ω–∏–∏ —á–µ—Ä–µ–∑ /start")
            return

        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ò–ù–ù –∫–æ–º–ø–∞–Ω–∏–∏ (10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä):")
        user_state["awaiting_inn"] = True

    async def process_inn_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ò–ù–ù –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏"""
        user_id = update.effective_user.id
        user_state = self.get_user_state(user_id)
        inn = update.message.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –ò–ù–ù
        if not (len(inn) in (10, 12) and inn.isdigit()):
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ò–ù–ù. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä.")
            user_state.pop("awaiting_inn", None)
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏ —á–µ—Ä–µ–∑ API
        api_client = FinancialAPIClient(self.checko_api_key)
        try:
            company_info = api_client.get_company_info(inn)
            user_state["company_data"] = {
                "inn": inn,
                "name": company_info["name"],
                "status": company_info["status"]
            }
            
            await update.message.reply_text(
                f"‚úÖ –ö–æ–º–ø–∞–Ω–∏—è –Ω–∞–π–¥–µ–Ω–∞: {company_info['name']}\n"
                f"–°—Ç–∞—Ç—É—Å: {company_info['status']}\n\n"
                "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –≤—ã–ø—É—Å–∫–∞:"
            )
            user_state["awaiting_token_amount"] = True
            user_state.pop("awaiting_inn", None)
            
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–ø–∞–Ω–∏–∏: {str(e)}")
            user_state.pop("awaiting_inn", None)

    async def process_token_amount(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤"""
        user_id = update.effective_user.id
        user_state = self.get_user_state(user_id)
        amount_text = update.message.text.strip()
        
        try:
            amount = float(amount_text)
            if amount <= 0:
                raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
                
            company_data = user_state.get("company_data")
            if not company_data:
                raise ValueError("–î–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –≤—ã–ø—É—Å–∫ —Ç–æ–∫–µ–Ω–æ–≤
            db = DBManager()
            db.register_or_update_business(company_data["inn"], company_data["name"])
            db.issue_tokens(company_data["inn"], amount)
            
            await update.message.reply_text(
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ –≤—ã–ø—É—â–µ–Ω–æ {amount} —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ {company_data['name']}!"
            )
            
        except ValueError as e:
            await update.message.reply_text(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤: {str(e)}")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø—É—Å–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤: {str(e)}")
        finally:
            user_state.pop("awaiting_token_amount", None)
            user_state.pop("company_data", None)

    async def show_companies(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π"""
        db = DBManager()
        companies = db.get_all_issuances()
        
        if not companies:
            await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π.")
            return

        response = "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏:\n"
        for idx, (inn, name, amount, _) in enumerate(companies):
            response += f"{idx+1}. {name} (–ò–ù–ù: {inn}) - —Ç–æ–∫–µ–Ω–æ–≤: {amount or 0}\n"
        
        await update.message.reply_text(response)

    async def buy_tokens(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫—É–ø–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤"""
        user_id = update.effective_user.id
        user_state = self.get_user_state(user_id)
        
        if user_state["role"] != "user":
            await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return

        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª\n–ü—Ä–∏–º–µ—Ä: 1 100")
        user_state["awaiting_purchase"] = True

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        user_state = self.get_user_state(user_id)
        text = update.message.text
        
        try:
            if user_state.get("awaiting_register"):
                name, email, password = text.split()
                user_manager = UserManager()
                
                try:
                    user_manager.register_user(name, email, password)
                    await update.message.reply_text(f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {name}!")
                    await self.show_companies(update, context)
                except UserAlreadyExists:
                    await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                
                user_state.pop("awaiting_register", None)

            elif user_state.get("awaiting_login"):
                email, password = text.split()
                user_manager = UserManager()
                
                if user_manager.authenticate_user(email, password):
                    await update.message.reply_text("‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                    await self.show_companies(update, context)
                else:
                    await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å.")
                
                user_state.pop("awaiting_login", None)

            elif user_state.get("awaiting_inn"):
                await self.process_inn_input(update, context)

            elif user_state.get("awaiting_token_amount"):
                await self.process_token_amount(update, context)

            elif user_state.get("awaiting_purchase"):
                company_num, amount = map(float, text.split())
                db = DBManager()
                companies = db.get_all_issuances()
                
                if not (1 <= company_num <= len(companies)):
                    await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–æ–º–ø–∞–Ω–∏–∏")
                    return
                
                inn = companies[int(company_num)-1][0]
                email = f"{user_id}@telegram.local"  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è email –Ω–∞ –æ—Å–Ω–æ–≤–µ Telegram ID
                
                try:
                    # –£–º–µ–Ω—å—à–∞–µ–º –æ–±—â–∏–π –ø—É–ª –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    db.issue_tokens(inn, -amount)
                    db.add_user_tokens(email, inn, amount)
                    await update.message.reply_text(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω–æ {amount} —Ç–æ–∫–µ–Ω–æ–≤!")
                except Exception as e:
                    await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏: {str(e)}")
                
                user_state.pop("awaiting_purchase", None)

        except ValueError as e:
            await update.message.reply_text(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞: {str(e)}")
            logger.log(f"User {user_id} input error: {str(e)}", level="ERROR")

    def setup_handlers(self, application):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        application.add_handler(CommandHandler("start", self.start))
        application.add_handler(CallbackQueryHandler(self.handle_role_selection))
        application.add_handler(CommandHandler("register", self.register_user))
        application.add_handler(CommandHandler("login", self.login_user))
        application.add_handler(CommandHandler("issue_tokens", self.issue_tokens))
        application.add_handler(CommandHandler("companies", self.show_companies))
        application.add_handler(CommandHandler("buy", self.buy_tokens))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))

def run_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º"""
    handler = TelegramBotHandler()
    application = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    handler.setup_handlers(application)
    
    logger.log("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å —Ç–æ–∫–µ–Ω–æ–º: " + TELEGRAM_BOT_TOKEN[:4] + "..." + TELEGRAM_BOT_TOKEN[-4:])
    application.run_polling()

if __name__ == "__main__":
    run_bot()